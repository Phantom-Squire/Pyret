include image
import shared-gdrive("bootstrap1-game-teachpack.arr", "0B32bNEogmncOa0w3SzVackFaVGc") as T

# 0. Game title: Write the title of your game here
TITLE = "My Game"
TITLE-COLOR = "white"

# Graphics - danger, target, projectile and player images
BACKGROUND = image-url("https://code.pyret.org/shared-image-contents?sharedImageId=1Iz3vSqWq1OYqAjKUrQLc3AyO7eWxLa2G")
DANGER = image-url("https://code.pyret.org/shared-image-contents?sharedImageId=1pmao0tagvFuirhC3FyUSRqP7fPB0O4vM")
TARGET = image-url("https://code.pyret.org/shared-image-contents?sharedImageId=1rMZ80qhZ3NSWylHM3-1Mc11dtFxkTS-N")
PLAYER = image-url("https://code.pyret.org/shared-image-contents?sharedImageId=1pjdJ-0vW8dD_Ra_7hu_9nUHDiXVilZZ1")

# here's a screenshot of the game, with the PLAYER at (320, 240),
# the TARGET at (400 500) and the DANGER at (150, 200)
SCREENSHOT = 
  put-image(DANGER, 150, 200,
    put-image(TARGET, 500, 400, 
      put-image(PLAYER, 320, 240, BACKGROUND)))


######################################################
# 1. Making the Danger and the Target Move

update-danger :: Number, Number -> Number
# given the danger's x-coordinate and y-coordinate, output the NEXT x

# write EXAMPLEs for update-danger below this line
examples:
  update-danger(3, 6) is 3 - 10
  update-danger(18, 12) is 18 - 10
end


fun update-danger(x, y):
  x - 10
end

update-target :: Number, Number -> Number
# given the target's x-coordinate and y-coordinate, output the NEXT x

# write EXAMPLEs for update-target below this line
examples:
  update-target(3, 6) is 3 - 10
  update-target(18, 12) is 18 - 10
end


fun update-target(x, y):
  x - 10
end

######################################################
# 2. Making the Danger and the Target Come Back Again: 
#    We need to know that they're gone!  
#    Are they on the screen?

is-safe-left :: Number -> Boolean
# Is the character visible on the left side of the screen?

# Write an EXAMPLE that makes this true, and one that makes this false:
examples:
  is-safe-left(50) is 50 > -50
  is-safe-left(-51) is -51 > -50
end
  fun is-safe-left(x): x > -50
end

is-safe-right :: Number -> Boolean
# Is the character visible on the right side of the screen?

# Write an EXAMPLE that makes this true, and one that makes this false:
examples:
  is-safe-right(500) is 500 < 690
  is-safe-right(700) is 700 < 690
end
fun is-safe-right(x): x < 690
end


is-onscreen :: Number, Number -> Boolean
# Determines if the coordinate is on the screen

# EXAMPLEs:

fun is-onscreen(x, y):
  is-safe-left(x) and is-safe-right(x)
end

######################################################
# 3. Get our Player moving!

update-player :: Number, Number, String -> Number
# given the player's x-coordinate, y-coordinate, and a direction, output the NEXT y

# EXAMPLEs:
examples:
  update-player(200,220, "up") is 220 + 20
  update-player(200,220, "up") is 220 + 20
  update-player(350, 10, "down") is 10 - 20
  update-player(320, 10, "down") is 10 - 20
end
fun update-player(x, y, key):
  if string-equals(key, up): y + 20
    if string-equals(key, down): y - 20
    else: y+0
  end
end

######################################################
# 4. Collisions: When the player is close enough to the Target
#    or the Danger, then something should happen!
#    We need to know what "close enough" means, and we need to
#    know how far apart things are.

# If _distances-color_ is set to "yellow", then the game will draw
# a yellow triangle between the player and each character. 
# That triangle will be labelled with line-length on the legs,
# and with distance on the hypotenuse. (This works for any valid color)
_distances-color_ = ""

line-length :: Number, Number -> Number
# the distance between two points on a number line
# some examples - notice that we should always return the
# same answer, no matter what the order of the inputs is!
examples:
  line-length(20, 10) is 20 - 10
  line-length(10, 20) is 20 - 10
end

fun line-length(a, b):
  if a > b: a - b
  else: b - a
  end
end

distance :: Number, Number, Number, Number -> Number
# The distance between two points on screen:
# We have the player's x and y, and a character's x and y.
# How far apart are they?
# EXAMPLEs:
examples:
  distance(4, 3, 0, 0) is num-sqrt((num-sqr(line-length(4,0)) + num-sqr(line-length(3,0))))
  distance(8, 6, 0, 0) is num-sqrt((num-sqr(line-length(8,0)) + num-sqr(line-length(6,0))))
  distance(px, py, cx, cy) is num-sqrt((num-sqr(line-length(4,0)) + num-sqr(line-length(3,0))))
end
fun distance(px, py, cx, cy): num-sqrt((num-sqr(line-length(4,0)) + num-sqr(line-length(3,0))))
end

is-collision :: Number, Number, Number, Number -> Boolean 
# How close is close enough?  
# We have the player's x and y, and a character's x and y.
# We can ask how far apart they are.  Did they collide?
# EXAMPLEs:
examples:
  is-collision(4, 3, 0, 0) is distance(4, 3, 0, 0) < 50
  is-collision(8, 6, 0, 0) is distance(8, 6, 0, 0) < 50
end

fun is-collision(px, py, cx, cy): distance(px, py, cx, cy) < 50
end

mystery = radial-star(5, 5, 3, "solid", "silver")
fun update-mystery(x, y):
  x
end


######################################################
# PROVIDED CODE

g = T.make-game(TITLE, TITLE-COLOR,
  BACKGROUND,
  DANGER, update-danger,
  TARGET, update-target,
  PLAYER, update-player,
  mystery, update-mystery,
  _distances-color_, line-length, distance,
  is-collision, is-onscreen)

T.play(g)
